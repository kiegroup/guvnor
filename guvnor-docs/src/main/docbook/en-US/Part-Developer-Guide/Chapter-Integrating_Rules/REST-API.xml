<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>REST API</title>

  <para>The repository back end can also be accessed via Rest. Rest is a http
  based protocol API - which has clients on all platforms and in all
  programming languages.</para>

  <section>
    <title>REST</title>

    <para>Representational State Transfer (REST) is a style of software
    architecture for distributed hypermedia systems such as the World Wide
    Web. The term Representational State Transfer was introduced and defined
    in 2000 by <link
    xlink:href="http://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</link>
    in his doctoral dissertation.</para>

    <para>REST-style architectures consist of clients and servers. Clients
    initiate requests to servers; servers process requests and return
    appropriate responses. Requests and responses are built around the
    transfer of representations of resources. A resource can be essentially
    any coherent and meaningful concept that may be addressed. A
    representation of a resource is typically a document that captures the
    current or intended state of a resource. The REST protocol is often
    considered as a light protocol versus SOAP.</para>
  </section>

  <section>
    <title>Guvnor REST API</title>

    <para>The Guvnor Rest API is divided in two groups of services : one
    around accessing rule assets by their names and packages and the second 
    accessing rule assets by categories.</para>

    <para>A rule asset represents any element that can be stored and handled
    in Guvnor : a guided rule, a web decision table, a test scenario,
    etc.</para>

    <para>The http address to use as base address is
    http://{ServerName}/{httpPort}/{drools-Guvnor}/rest where ServerName is
    the host name on the server on which Guvnor is deployed, httpPort the port
    number (8080 by default development), drools-guvnor the name of the
    archived deployed (guvnor-webapp-5.3.0 for version 5.3.0).</para>

    <section>
      <title>Accessing Rule Assets by Package</title>

      <para>This part of the API allows to access all rule assets by package
      (with its name) and by the asset name.</para>

      <table>
        <title>Accessing Rule Assets by Package</title>

        <tgroup cols="5">
          <thead>
            <row>
              <entry align="center">URL</entry>

              <entry align="center">Mode</entry>

              <entry align="center">Produces MIME-Type</entry>

              <entry align="center">Consumes MIME-Type</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>/packages</entry>

              <entry>GET</entry>

              <entry>application/atom+xml</entry>

              <entry>none</entry>

              <entry>Returns all packages contained in the Guvnor repository
              in Atom Feed format</entry>
            </row>

            <row>
              <entry>/packages</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Returns all packages contained in the Guvnor repository
              in JSON or XML format</entry>
            </row>

            <row>
              <entry>/packages</entry>

              <entry>POST</entry>

              <entry>application/atom+xml</entry>

              <entry>application/octet-stream</entry>

              <entry>Creates a new package from an input stream of DRL.
              Returns the newly created package in Atom Entry format.</entry>
            </row>

            <row>
              <entry>/packages</entry>

              <entry>POST</entry>

              <entry>application/json and application/xml</entry>

              <entry>application/octet-stream</entry>

              <entry>Creates a package from an input stream of DRL. Returns
              the newly created package in JSON or XML format.</entry>
            </row>

            <row>
              <entry>/packages</entry>

              <entry>POST</entry>

              <entry>application/atom+xml</entry>

              <entry>application/atom+xml</entry>

              <entry>Creates a package from an Atom Entry. Returns the newly
              created package in Atom Entry format. Following info are required from the input Atom Entry: package name, package description.</entry>
            </row>

            <row>
              <entry>/packages</entry>

              <entry>POST</entry>

              <entry>application/json and application/xml</entry>

              <entry>application/json and application/xml</entry>

              <entry>Creates a package from JSON or XML. Returns the newly
              created package in JSON or XML format.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}</entry>

              <entry>GET</entry>

              <entry>application/atom+xml</entry>

              <entry>none</entry>

              <entry>Returns the metadata of the package {packageName} as an Atom Entry. If the package {packageName}
              does not exist, status 404 is returned.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Returns the metadata of the package {packageName} as a Package element (see UML representation
              below). If the package {packageName} does not exist, status 404 is returned.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/source</entry>

              <entry>GET</entry>

              <entry>plain/text</entry>

              <entry>none</entry>

              <entry>Returns the source code of the package {packageName} as a
              text file. If the package {packageName} does not exist, status 404 is returned.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/binary</entry>

              <entry>GET</entry>

              <entry>application/octet-stream</entry>

              <entry>none</entry>

              <entry>Returns the compiled binary of the package {packageName}
              as a binary stream. If the package has not been compiled yet or
              its binary is not up to date, this will compile the package
              first. If the package {packageName} does not exist, status 404 is returned.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/versions</entry>

              <entry>GET</entry>

              <entry>application/atom+xml</entry>

              <entry>none</entry>

              <entry>Returns the list of package {packageName} versions as
              an Atom Feed .</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/versions/{version}</entry>

              <entry>GET</entry>

              <entry>application/atom+xml</entry>

              <entry>none</entry>

              <entry>Returns the metadata of package {packageName} and of
              version {version} as an Atom Entry .</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/versions/{version}/source</entry>

              <entry>GET</entry>

              <entry>text/plain</entry>

              <entry>none</entry>

              <entry>Returns the source code of package {packageName} and of
              version {version} as a text file.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/versions/{version}/binary</entry>

              <entry>GET</entry>

              <entry>application/octet-stream</entry>

              <entry>none</entry>

              <entry>Returns the binary (compiled code) of package
              {packageName} and of version {version} as an octet stream. If
              the package version was never built, it returns HTTP code 500 with an
              error message.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}</entry>

              <entry>PUT</entry>

              <entry>application/atom+xml</entry>

              <entry>none</entry>

              <entry>Updates the metadata of package {packageName} with a
              given Atom Entry.</entry>
            </row>
            
            <row>
              <entry>/packages/{packageName}</entry>

              <entry>PUT</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Updates the metadata of package {packageName} with a
              given JSON or XML.</entry>
            </row>
            
            <row>
              <entry>/packages/{packageName}</entry>

              <entry>DELETE</entry>

              <entry>none</entry>

              <entry>none</entry>

              <entry>Deletes package {packageName}.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets</entry>

              <entry>GET</entry>

              <entry>application/atom+xml</entry>

              <entry>none</entry>

              <entry>Returns the list of rule assets contained in package
              {packageName} as an Atom Feed.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Returns the list of rule assets contained in package
              {packageName} in JSON or XML format</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}</entry>

              <entry>GET</entry>

              <entry>application/atom+xml</entry>

              <entry>none</entry>

              <entry>Returns the rule asset {assetName} contained in package {packageName} in Atom Entry format.
              If the asset {assetName} does not exist, status 404 is returned.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Returns the rule asset {assetName} contained in package
              {packageName} as an Asset in JSON or XML format (see the UML
              representation below). If the asset {assetName} does not exist, status 404 is returned.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}/binary</entry>

              <entry>GET</entry>

              <entry>application/octet-stream</entry>

              <entry>none</entry>

              <entry>Returns the binary content of rule asset {assetName}
              contained in package {packageName}. If this asset has no binary
              content, returns its source content instead.
              If the asset {assetName} does not exist, status 404 is returned.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}/source</entry>

              <entry>GET</entry>

              <entry>plain/text</entry>

              <entry>none</entry>

              <entry>Returns the content of rule asset {assetName} contained
              in package {packageName}. If this is a binary asset, returns the 
              binary data as a byte array. If the asset {assetName} does not exist, status 404 is returned.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets</entry>

              <entry>POST</entry>

              <entry>application/atom+xml</entry>

              <entry>application/atom+xml</entry>

              <entry>Creates an asset in package {packageName} from the Atom
              Entry provided. Following info are required from the input Atom
              Entry: asset name, asset description, asset initial category,
              asset format.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets</entry>

              <entry>POST</entry>

              <entry>application/octet-stream</entry>

              <entry>application/atom+xml</entry>

              <entry>Creates a binary asset in package {packageName} from the
              input stream. The value of Slug header is used to indicate the
              name of the asset. This returns HTTP 500 error if the Slug
              header is missing.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}</entry>

              <entry>PUT</entry>

              <entry>application/atom+xml</entry>

              <entry>none</entry>

              <entry>Updates the metadata of the rule asset {assetName}
              contained in package {packageName} with a given Atom Entry.</entry>
            </row>
            
            <row>
              <entry>/packages/{packageName}/assets/{assetName}</entry>

              <entry>PUT</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Updates the metadata of the rule asset {assetName}
              contained in package {packageName} with a given Asset (see the
              UML representation below).</entry>
            </row>
            
            <row>
              <entry>/packages/{packageName}/assets/{assetName}/source</entry>

              <entry>PUT</entry>

              <entry>plain/text</entry>

              <entry>none</entry>

              <entry>Updates the source code of the rule asset {assetName}
              contained in package {packageName}.</entry>
            </row>
            
            <row>
              <entry>/packages/{packageName}/assets/{assetName}/binary</entry>

              <entry>PUT</entry>

              <entry>application/octet-stream</entry>

              <entry>none</entry>

              <entry>Updates the binary content of the rule asset {assetName}
              contained in package {packageName}.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}/versions</entry>

              <entry>GET</entry>

              <entry>application/atom+xml</entry>

              <entry>none</entry>

              <entry>Returns the list of rule asset {assetName} versions contained in package {packageName} as
              an Atom Feed .</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}/versions/{version}</entry>

              <entry>GET</entry>

              <entry>application/atom+xml</entry>

              <entry>none</entry>

              <entry>Returns the metadata of rule asset {assetName} of version {version} 
              contained in package {packageName} as an Atom Entry .</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}/versions/{version}/source</entry>

              <entry>GET</entry>

              <entry>text/plain</entry>

              <entry>none</entry>

              <entry>Returns the source code of rule asset {assetName} of version {version} 
              contained in package {packageName} as a text file.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}/versions/{version}/binary</entry>

              <entry>GET</entry>

              <entry>application/octet-stream</entry>

              <entry>none</entry>

              <entry>Returns the binary content of rule asset {assetName} of version {version} 
              contained in package {packageName}.  If this asset has no binary
              content, returns its source content instead.</entry>
            </row>
            
            <row>
              <entry>/packages/{packageName}/assets/{assetName}</entry>

              <entry>DELETE</entry>

              <entry>none</entry>

              <entry>none</entry>

              <entry>Deletes the rule asset {assetName} contained in package
              {packageName}.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/snapshot/{snapshotName}</entry>

              <entry>POST</entry>

              <entry>none</entry>

              <entry>none</entry>

              <entry>Creates a snapshot {assetName} snapshotName for the package
              {packageName}.</entry>
            </row>

            <row>
              <entry>{packageName}/assets</entry>

              <entry>POST</entry>

              <entry>application/json and application/xml</entry>

              <entry>multipart/form-data</entry>

              <entry>Creates the asset {assetName} in the {packageName}.</entry>
            </row>

            <row>
              <entry>{packageName}/assets/{assetName}</entry>

              <entry>PUT</entry>

              <entry>application/json and application/xml</entry>

              <entry>multipart/form-data</entry>

              <entry>Updates the asset {assetName} in the {packageName}.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <figure>
        <title>UML representation of the Package Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/PackageUMLRepresentation.png"
                       format="PNG" xml:base="../../"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      

      <figure>
        <title>UML representation of the Asset Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/AssetUMLRepresentation.png"
                       format="PNG" xml:base="../../"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
      
    </section>
    
    <section>
      <title>Getting rule Assets by Category</title>

      <para>This part of the API uses as entry point the categories defined
      for each rule asset when it is created by the user in Guvnor</para>

      <table>
        <title>Accessing Rule Assets by Category</title>

        <tgroup cols="4">
          <thead>
            <row>
              <entry align="center">URL</entry>

              <entry align="center">Mode</entry>

              <entry align="center">MIME-Type</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>/categories/</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>Lists all categories</entry>
            </row>

            <row>
              <entry>/categories/{categoryPath}</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>Returns the info of a single category.</entry>
            </row>

            <row>
              <entry>/categories/{categoryPath}/children</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>Lists all subcategories under the category {categoryPath}</entry>
            </row>

            <row>
              <entry>/categories/{categoryPath}/assets</entry>

              <entry>GET</entry>

              <entry>application/atom/xml</entry>

              <entry>Retrieves an Atom feed to all Rule assets that have the
              category {categoryPath}</entry>
            </row>

            <row>
              <entry>/categories/{categoryPath}/assets</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>Returns a list of objects of Assets representing a Rule
              Asset that have the category {categoryPath}</entry>
            </row>

            <row>
              <entry>/categories/{categoryPath}/assets//page/{page}</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>Returns a list of objects of Assets representing a Rule
              Asset that have the category {categoryPath} and retrieves page
              {page} with is a numeric (1,2, 3, etc..). A page contains 10
              elements. If the list contains 20 elements then the list will
              have 2 pages. You first have to call for page 1 and then call
              for page 2</entry>
            </row>

            <row>
              <entry>/categories/{categoryPath}</entry>

              <entry>PUT</entry>

              <entry>none</entry>

              <entry>Creates a new category with the category path {categoryPath}.</entry>
            </row>

            <row>
              <entry>/categories/{categoryPath}</entry>

              <entry>DELETE</entry>

              <entry>none</entry>

              <entry>Deletes the category with the category path {categoryPath}.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

    </section>

    
  </section>

  <section>
    <title>Source code Example</title>

    <para>We are giving a list of examples to help using the Guvnor's Rest
    API</para>

    <section>
      <title>Retrieving and updating Web decision table</title>

      <para>We are using apache CXF in our example to show how to access the
      Rest API of Guvnor. In the example here we are getting and updating a
      web decision table. But this example applies to all Guvnor asset
      type.</para>

      <example>
        <title>Retrieving the source code of the web decision table</title>

        <programlisting>WebClient client = WebClient.create("http://127.0.0.1:8080/");
String content=client.path("guvnor-webapp-${project.version}/rest/packages/essaiRest/assets/tab2/source").accept("text/plain").get(String.class);
GuidedDecisionTable52 dt = GuidedDTXMLPersistence.getInstance().unmarshal(content);        </programlisting>
      </example>

      <para>In the first line of code above, we are first creating a WebClient
      variable that points to the server (here on localhost on port
      8080).</para>

      <para>In the second line of code above, we are retrieving the source
      content by accessing the
      /rest/packages/{packageName}/assets/{assetName}/source, where in our case
      packageName is "essaiRest" and assetName is "tab2".</para>

      <para>In the third line of code above, the source code we get is the
      data structure of a Web decision table. So to be able to manipulate the
      Web decision table, we have to transform the string variable (the source
      code that contains the xml of the data structure of the web decision
      table) in the java structure (a java class) for web decision table
      GuidedDecisionTable52. All guided asset in Guvnor have a java structure
      to manipulate them</para>

      <example>
        <title>updating the source code of the web decision table</title>

        <programlisting>String authorizationHeader = "Basic " + org.apache.cxf.common.util.Base64Utility.encode("guest:".getBytes());
GuidedDecisionTable52 dt = new GuidedDecisionTable52();
.. 
Do some stuff here
..
String newContent = GuidedDTXMLPersistence.getInstance().marshal(dt);
WebClient client2 = WebClient.create("http://127.0.0.1:8080/");
client2.header("Authorization", authorizationHeader);
Response response= client2.path("guvnor-webapp-${project.version}/rest/packages/essaiRest/assets/tab2/source").accept("application/xml").put(newContent);        </programlisting>
      </example>

      <para>In the first line of code above, we are first creating a java
      String variable that contains the authorization element needed to update
      an asset in the Guvnor repository.</para>

      <para>In the next lines of code above, we are doing some stuff to modify
      the Web decision table.</para>

      <para>In the following lines of code above, we are first transforming
      the java structure in an xml structure that we put in a java String
      variable. Then we again create a WebClient but this time we are also
      filling the header with a variable "Authorization" that contains the
      String we built in the first line and that contains the user name
      "guest" and its password (here no password). We then put the new content
      on the Guvnor repository.</para>

      <para>Next you can find the pom.xml file to use the Guvnor Rest API in
      case you are using Maven.</para>

      <example>
        <title>pom.xml content for our example</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.drools.examples&lt;/groupId&gt;
  &lt;artifactId&gt;dt-example&lt;/artifactId&gt;
  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
  &lt;build&gt;
    &lt;finalName&gt;cxf-rest-example&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;source&gt;1.6&lt;/source&gt;
          &lt;target&gt;1.6&lt;/target&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
      &lt;artifactId&gt;cxf-bundle-jaxrs&lt;/artifactId&gt;
      &lt;version&gt;2.3.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.drools&lt;/groupId&gt;
      &lt;artifactId&gt;droolsjbpm-ide-common&lt;/artifactId&gt;
      &lt;version&gt;5.3.0&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;        </programlisting>
      </example>
    </section>
    
    <section>
        <title>Retriving package list, package metadata, package source and binary, package version info etc using Atom</title>
        <para>In this example we are using Apache Abdera to help parsing and creating Atom Entry and Feed.</para>   
          
        <section>
          <title>Retrieving all packages contained in the Guvnor repository in Atom Feed format</title>
          <example>
            <title>Retrieving all packages contained in the Guvnor repository in Atom Feed format</title>
            <programlisting language="Java" role="JAVA"><xi:include href="extras/packageListSampleCode.java" parse="text" /></programlisting>
          </example>
          <example>
            <title>Sample message returned from server</title>          
            <programlisting language="XML" role="XML"><xi:include href="extras/packageListSampleMessage.xml" parse="text" /></programlisting>
          </example>
        </section>
        
        <section>
          <title>Retrieving the metadata of the specified package as an Atom Entry</title>
          <para>The client can navigate to specific packages using the package URL retrieved from package list.</para>   
          
          <example>
            <title>Retrieving the metadata of the specified package as an Atom Entry</title>
            <programlisting language="Java" role="JAVA"><xi:include href="extras/packageMetadataSampleCode.java" parse="text" /></programlisting>
          </example>
          <example>
            <title>Sample message returned from server</title>          
            <programlisting language="XML" role="XML"><xi:include href="extras/packageMetadataSampleMessage.xml" parse="text" /></programlisting>
          </example>
        </section>
        
        <section>
          <title>Retrieving the source code of the specified package as plain text</title>           
          <example>
            <title>Retrieving the source code of the specified package as plain text</title>
            <programlisting language="Java" role="JAVA"><xi:include href="extras/packageSourceSampleCode.java" parse="text" /></programlisting>
          </example>
        </section>
        
        <section>
          <title>Retrieving the compiled binary of the specified package as binary stream</title>
          <para>Retrieving the compiled binary of the specified package as a binary stream. If the package has not been compiled yet or its binary is not up to date, Guvnor will compile the package first.</para>   
          
          <example>
            <title>Retrieving the compiled binary of the specified package as binary stream</title>
            <programlisting language="Java" role="JAVA"><xi:include href="extras/packageBinarySampleCode.java" parse="text" /></programlisting>
          </example>
        </section>          
        
        <section>
          <title>Retrieving package versions as an Atom Feed</title>
          
          <example>
            <title>Retrieving package versions as an Atom Feed</title>
            <programlisting language="Java" role="JAVA"><xi:include href="extras/packageVersionsSampleCode.java" parse="text" /></programlisting>
          </example>
          <example>
            <title>Sample message returned from server</title>          
            <programlisting language="XML" role="XML"><xi:include href="extras/packageVersionsSampleMessage.xml" parse="text" /></programlisting>
          </example>
        </section>
         
        <section>
          <title>Retrieving package metadata with specified version as an Atom Entry</title>
          <para>Retrieving package metadata with specified version as an Atom Entry.</para>   
          
          <example>
            <title>Retrieving package metadata with specified version as an Atom Entry</title>
            <programlisting language="Java" role="JAVA"><xi:include href="extras/packageVersion5MetadataSampleCode.java" parse="text" /></programlisting>
          </example>
          <example>
            <title>Sample message returned from server</title>          
            <programlisting language="XML" role="XML"><xi:include href="extras/packageVersion5MetadataSampleMessage.xml" parse="text" /></programlisting>
          </example>
        </section>
                                    
    </section>

  </section>
</section>
