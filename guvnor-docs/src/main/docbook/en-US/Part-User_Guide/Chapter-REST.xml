<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2011 JBoss Inc
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Rest and HTTP</title>

  <para>The repository back end can also be accessed via Rest. Rest is a http
  based protocol API - which has clients on all platforms and in all
  programming language.</para>

  <section>
    <title>Rest</title>

    <para>Representational State Transfer (REST) is a style of software
    architecture for distributed hypermedia systems such as the World Wide
    Web. The term Representational State Transfer was introduced and defined
    in 2000 by <link linkend="http://en.wikipedia.org/wiki/Roy_Fielding">Roy
    Fielding </link> in his doctoral dissertation.</para>

    <para>REST-style architectures consist of clients and servers. Clients
    initiate requests to servers; servers process requests and return
    appropriate responses. Requests and responses are built around the
    transfer of representations of resources. A resource can be essentially
    any coherent and meaningful concept that may be addressed. A
    representation of a resource is typically a document that captures the
    current or intended state of a resource. the REST protocol is often
    considered as a light protocol versus SOAP</para>
  </section>

  <section>
    <title>Guvnor API</title>

    <para>The Guvnor Rest API is divided in two groups of services : one
    around getting rule assets by categories and the second getting rule
    assets by their name and package.</para>

    <para>A rule asset represents all elements that can be stored and handled
    in Guvnor : a guided rule, a web decision table, a scenario tests,
    etc..</para>

    <para>The http adress to use as base address is
    http://{ServerName}/{httpPort}/{drools-Guvnor}/rest where ServerName is
    the host name on the server on which Guvnor is deployed, httpPort the port
    number (8080 by default development ), drools-guvnor the name of the
    archived deployed (guvnor-webapp-5.3.0 for version 5.3.0).</para>

    <section>
      <title>Getting rule Assets by Category</title>

      <para>This part of the API uses as entry point the categories defined
      for each rule asset when it is created by the user in Guvnor</para>

      <table frame="AssetByCategory">
        <title>Accessing Rule Assets by Category</title>

        <tgroup cols="4">
          <colspec colname="col1" colnum="1" colwidth="2*" />

          <colspec colname="col2" colnum="2" colwidth="0.25*" />

          <colspec colname="col2" colnum="3" colwidth="0.75*" />

          <colspec colname="col4" colnum="4" colwidth="3*" />

          <thead>
            <row>
              <entry>address</entry>

              <entry>mode</entry>

              <entry>produces media type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>/categories/{categoryName}</entry>

              <entry>GET</entry>

              <entry>application/atom/xml</entry>

              <entry>Retrieves an Rss feed to all Rule assets that have the
              category {categoryName}</entry>
            </row>

            <row>
              <entry>/{categoryName}</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>Returns a list of objects of Assets representing a Rule
              Asset that have the category {categoryName}</entry>
            </row>

            <row>
              <entry>/{categoryName}/page/{page}</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>Returns a list of objects of Assets representing a Rule
              Asset that have the category {categoryName} and retrieves page
              {page} with is a numeric (1,2, 3, etc..). A page contains 10
              elements. If the list contains 20 elements then the list will
              have 2 pages. You first have to call for page 1 and then call
              for page 2</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <figure>
        <title>UML representation of the Assert Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="images/Chapter-Guvnor/AssetUMLRepresentation.png"
                       format="PNG" scalefit="0.5"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Getting rule Assets by package</title>

      <para>This part of the API allows to access all rule asset by package
      (with its name) and by the asset name.</para>

      <table frame="AssetByPaccakge">
        <title>Accessing Rule Assets by Package</title>

        <tgroup cols="5">
          <colspec colname="col1" colnum="1" colwidth="2*" />

          <colspec colname="col2" colnum="2" colwidth="0.25*" />

          <colspec colname="col2" colnum="3" colwidth="0.75*" />

          <colspec colname="col3" colnum="4" colwidth="0.75*" />

          <colspec colname="col4" colnum="5" colwidth="3*" />

          <thead>
            <row>
              <entry>address</entry>

              <entry>mode</entry>

              <entry>produces Media Type</entry>

              <entry>consumes Media Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>/packages</entry>

              <entry>GET</entry>

              <entry>application/atom/xml</entry>

              <entry>none</entry>

              <entry>Retrieves an Rss feed of all packages contained in the
              Guvnor repository</entry>
            </row>

            <row>
              <entry>/packages</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Retrieve the list of package contained in the Guvnor
              repository</entry>
            </row>

            <row>
              <entry>/packages</entry>

              <entry>POST</entry>

              <entry>application/atom/xml</entry>

              <entry>application/octet/stream</entry>

              <entry>As en entry this method takes a octet stream (like a java
              input stream) and in returns sends a Package class.</entry>
            </row>

            <row>
              <entry>/packages</entry>

              <entry>POST</entry>

              <entry>application/atom/xml</entry>

              <entry>application/atom/xml</entry>

              <entry>Creates a package in Guvnor given an atom feed entry. As
              an ouput, gives the package resulting.</entry>
            </row>

            <row>
              <entry>/packages</entry>

              <entry>POST</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>As an entry, this method requires an object Package (see
              the UML represetation further) and Guvnor will create a new
              package in the repository.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}</entry>

              <entry>GET</entry>

              <entry>application/atom/xml</entry>

              <entry>none</entry>

              <entry>Returns the metadata of the package {packageName} as a
              Atom entry.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Returns the metadata of the package {packageName} as a
              Package element (see UML representatin below.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/source</entry>

              <entry>GET</entry>

              <entry>plain/text</entry>

              <entry>none</entry>

              <entry>Returns the source code of the package {packageName} as a
              text file.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/binary</entry>

              <entry>GET</entry>

              <entry>application/octet/stream</entry>

              <entry>none</entry>

              <entry>Returns the package {packageName} as a binary stream
              (java stream) .</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/versions</entry>

              <entry>GET</entry>

              <entry>application/atom/xml</entry>

              <entry>none</entry>

              <entry>Returns the list of versions of package {packageName} as
              an atom feed .</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/versions/{version}</entry>

              <entry>GET</entry>

              <entry>application/atom/xml</entry>

              <entry>none</entry>

              <entry>Returns the metadata of package {packageName} and of
              version {version} as an atom entry .</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/versions/{version}/source</entry>

              <entry>GET</entry>

              <entry>text/plain</entry>

              <entry>none</entry>

              <entry>Returns the source code of package {packageName} and of
              version {version} as a text file.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/versions/{version}/binary</entry>

              <entry>GET</entry>

              <entry>application/octet/stream</entry>

              <entry>none</entry>

              <entry>Returns the binary (compiled code) of package
              {packageName} and of version {version} as a octet stream. If the
              package was never built, it throws an exception.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets</entry>

              <entry>GET</entry>

              <entry>application/atom/xml</entry>

              <entry>none</entry>

              <entry>Returns the list of rule asset contained in package
              {packageName} as a list of an atom feed.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}</entry>

              <entry>PUT</entry>

              <entry>application/atom/xml</entry>

              <entry>none</entry>

              <entry>Updates the metadata of package {packageName} wit a given
              atom entry.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}</entry>

              <entry>DELETE</entry>

              <entry>application/atom/xml</entry>

              <entry>none</entry>

              <entry>Deletes package {packageName}.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Returns the list of rule asset contained in package
              {packageName} as an Asset (see the UML representation
              below).</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets</entry>

              <entry>PUT</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>updates the package metadata {packageName} as a Package
              (see the UML representation below).</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}</entry>

              <entry>GET</entry>

              <entry>application/atom/xml</entry>

              <entry>none</entry>

              <entry>Returns the rule asset {assetName} contained in package
              {packageName} as an atom feed.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}</entry>

              <entry>GET</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Returns the rule asset {assetName} contained in package
              {packageName} as an Asset (see the UML representation
              below).</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}/binary</entry>

              <entry>GET</entry>

              <entry>application/octet/binary</entry>

              <entry>none</entry>

              <entry>Returns the rule asset {assetName} contained in package
              {packageName} as a binary (java stream)</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}/source</entry>

              <entry>GET</entry>

              <entry>plain/text</entry>

              <entry>none</entry>

              <entry>Returns the source code of the rule asset {assetName}
              contained in package {packageName}.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}/source</entry>

              <entry>PUT</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Updates the source code of the rule asset {assetName}
              contained in package {packageName}.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}</entry>

              <entry>PUT</entry>

              <entry>application/atom/xml</entry>

              <entry>none</entry>

              <entry>Updates the metadata of the rule asset {assetName}
              contained in package {packageName} given in a Atom
              entry.</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}</entry>

              <entry>PUT</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Updates the metadata of the rule asset {assetName}
              contained in package {packageName} given in an Asset (see the
              UML representation below).</entry>
            </row>

            <row>
              <entry>/packages/{packageName}/assets/{assetName}</entry>

              <entry>DELETE</entry>

              <entry>application/json and application/xml</entry>

              <entry>none</entry>

              <entry>Deletes the rule asset {assetName} contained in package
              {packageName}.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <figure>
        <title>UML representation of the Package Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="images/Chapter-Guvnor/PackageUMLRepresentation.png"
                       format="PNG" scalefit="0.5"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>


    </section>
  </section>

  <section>
    <title>Source code Example</title>

    <para>We are giving a list of example to help using the Guvnor's Rest
    API</para>

    <section>
      <title>Retrieving and updating Web decision table </title>

      <para>We are using apache CXF in our example to show how to access the
      Rest API of Guvnor. In the example here we are getting and updating a
      web decision table. But this example applies to all Guvnor asset type.</para>

      <example>
        <title>Retrieving the source code of the web decision table</title>

        <programlisting>WebClient client = WebClient.create("http://127.0.0.1:8080/");
String content=client.path("guvnor-webapp-5.3.0-SNAPSHOT/rest/packages/essaiRest/assets/tab2/source").accept("text/plain").get(String.class);
GuidedDecisionTable52 dt = GuidedDTXMLPersistence.getInstance().unmarshal(content);        </programlisting>
      </example>

       <para>In the first line of code above, we are first creating a WebClient variable that points to the server
         (here on localhost on port 8080). </para>
      <para>In the second line of code above, we are retrieving the source content by accessing
        the /rest/packages/{packageName}/assets/{assetName}/source where i our case packageName is "essaiRest"
        and assetName is "tab2".</para>
      <para>In the third line of code above, the source code we get is the data structure of a Web decision table.
        So to be able to  manipulate the Web decision table, we have to transform the string variable
        (the source code that contains the xml of the data structure of the web decision table) in the
        java structure (a java class) for web decision table GuidedDecisionTable52.
        All guided asset in Guvnor have a java structure to manipulate them</para>


      <example>
        <title>updating the source code of the web decision table</title>

        <programlisting>String authorizationHeader = "Basic " + org.apache.cxf.common.util.Base64Utility.encode("guest:".getBytes());
GuidedDecisionTable52 dt = new GuidedDecisionTable52();
.. 
Do some stuff here
..
String newContent = GuidedDTXMLPersistence.getInstance().marshal(dt);
WebClient client2 = WebClient.create("http://127.0.0.1:8080/");
client2.header("Authorization", authorizationHeader);
Response response= client2.path("guvnor-webapp-5.3.0-SNAPSHOT/rest/packages/essaiRest/assets/tab2/source").accept("application/xml").put(newContent);        </programlisting>
      </example>

       <para>In the first line of code above, we are first creating a java String variable that contains the
         authorization element needed to update an asset on the Guvnor repository.
       </para>

         <para>In the next lines of code above, we are doing some stuff to modify the Web decision table.
       </para>

       <para>In the following  lines of code above, we are first transforming the java structure in an xml structure
         that we put in a java String variable.
         Then we again create a WebClient but this time we are also filling the header with a variable "Authorization"
         that contains the String we built in the first line and that contains  the user name "guest" and its password
         (here no password). We then put the new content on the Guvnor repository.
       </para>

       <para>Next you can find the pom.xml file to use the Guvnor Rest API in case yuo are using Maven.
       </para>

      <example>
        <title>pom.xml content for our example</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.drools.examples&lt;/groupId&gt;
  &lt;artifactId&gt;dt-example&lt;/artifactId&gt;
  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
  &lt;build&gt;
    &lt;finalName&gt;cxf-rest-example&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;source&gt;1.6&lt;/source&gt;
          &lt;target&gt;1.6&lt;/target&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;
      &lt;artifactId&gt;cxf-bundle-jaxrs&lt;/artifactId&gt;
      &lt;version&gt;2.3.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.drools&lt;/groupId&gt;
      &lt;artifactId&gt;droolsjbpm-ide-common&lt;/artifactId&gt;
      &lt;version&gt;5.3.0-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;        </programlisting>
      </example>



    </section>
  </section>
</chapter>
