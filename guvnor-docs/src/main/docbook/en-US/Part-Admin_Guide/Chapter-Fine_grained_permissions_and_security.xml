<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
  xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

  <title>Fine grained permissions and security</title>

   <para>
   The above section talks about establishing identity and access for users. This section talks about granting
   specific permissions to these users (to control data visibility and access). This can be used to partition
   data, or to control access for "non power users" which can limit the damage they can do.
   </para>

  <figure>
    <title>Administer user permissions</title>
    <mediaobject>
      <imageobject>
        <imagedata align="center"
                   fileref="images/Chapter-Guvnor/AdminPermissions.png"
                   format="PNG" scalefit="1"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <para>
  A common need and desire of the web interface of Guvnor is to be able to have users of different technical
  abilities interact with it. Another need is to be able to allocate people different sets of data to "own".
  </para>

  <para>
  Typically users identities are managed in a centralized directory - application servers can integrate with
  these directories (e.g. active directory, LDAP) so users to Guvnor can be authenticated without having to
  create another duplicate identity. It is also possible (thanks to JAAS) to define what users have the
  "admin" role for Guvnor (note that an Admin user of Guvnor doesn't have to really be a system
  administrator). Further to this, Guvnor augments this identity with data specific permissions, which are
  managed in Guvnor itself.
  </para>

  <figure>
    <title>User listing</title>
    <mediaobject>
      <imageobject>
        <imagedata align="center"
                   fileref="images/Chapter-Guvnor/AdminPermissionsList.png"
                   format="PNG" scalefit="1"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <para>
  Note that the above users identities are not stored in Guvnor, only their permission mappings are which are
  specific to Guvnor.
  </para>

  <para>
  There are really two system wide roles: Users who are Administrators and users who are not. Administrators
  can see and do anything. Out of the box, the permission system is turned off, and every user is an
  administrator (this is pretty much how things used to work). There is also a system setting in
  <filename>beans.xml</filename> that can turn the permissions system on and off (so people can manually
  override if needs be). A administrator can also give other users admin rights, regardless of their roles in
  the external directory service.
  </para>

  <figure>
    <title>Editing</title>

    <mediaobject>
      <imageobject>
        <imagedata align="center"
                   fileref="images/Chapter-Guvnor/AdminPermissionEdit.png"
                   format="PNG" scalefit="1"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <para>
  There are several types of permissions: Per package: Package Administrator ("owns" a package - can deploy
  etc, but has no administrative rights to the system). Package developer - this permissions allows users to
  create new items, edit etc - but only at the package level (not deploy). They can also run and create tests.
  Package readonly - well this one is pretty obvious. Per Category: This is the "interesting" one - as assets
  (rules) can be tagged with multiple categories, you can use these to assign permissions to an "analyst" type
  of user. A user can be assigned multiple categories. A user can then edit and view any asset that is tagged
  in that category (regardless of package). A user that only has category permissions will not be shown any
  package views or details, and will only see the simple categories view. This allows administrators and
  managers to control exactly what these users can and can't see. Note that per category permissions can also
  be set as "read only" so a user can view all the assets in a category, but not make changes to them.
  </para>

  <figure>
    <title>The analyst view</title>
    <mediaobject>
      <imageobject>
        <imagedata align="center"
                   fileref="images/Chapter-Guvnor/AdminAnalyst.png"
                   format="PNG" scalefit="1"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

   <para>
   The per category "analyst" permissions are quite useful - you can also augment their permissions with a
   specific package (so on top of their category rights, they can see and play with a particular package -
   which may be used as a "practice" area, or test area for instance). This provides a few ways to manage
   permissions in a coarse or fine grained way, as suits the different types of users.
   </para>

   <section>
      <title>Enabling fine grained authorization</title>

      <para>
      By default authorization is NOT enabled. To enable it, edit the <filename>beans.xml</filename> file
      in the <filename>WEB-INF</filename> directory:
      </para>

    <programlisting language="XML"><![CDATA[<component name="org.jboss.seam.security.roleBasedPermissionResolver">;
  <s:modifies/>
  <property name="enableRoleBasedAuthorization">true</property>
</component>]]></programlisting>

  </section>
  
</chapter>
